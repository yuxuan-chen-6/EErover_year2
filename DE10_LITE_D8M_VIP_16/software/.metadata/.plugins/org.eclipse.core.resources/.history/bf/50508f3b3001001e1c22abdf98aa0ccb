#include <stdio.h>
#include "I2C_core.h"
#include "terasic_includes.h"
#include "mipi_camera_config.h"
#include "mipi_bridge_config.h"
#include "compress.h"

#include "auto_focus.h"

#include <fcntl.h>
#include <unistd.h>

// EEE_IMGPROC defines
#define EEE_IMGPROC_MSG_START ('R' << 16 | 'B' << 8 | 'B')

// Offsets
#define EEE_IMGPROC_STATUS 0
#define EEE_IMGPROC_MSG 1
#define EEE_IMGPROC_ID 2
#define EEE_IMGPROC_BBCOL 3

#define EXPOSURE_INIT 0x005000
#define EXPOSURE_STEP 0x300
#define GAIN_INIT 0x080
#define GAIN_STEP 0x040
#define DEFAULT_LEVEL 3

#define MIPI_REG_PHYClkCtl 0x0056
#define MIPI_REG_PHYData0Ctl 0x0058
#define MIPI_REG_PHYData1Ctl 0x005A
#define MIPI_REG_PHYData2Ctl 0x005C
#define MIPI_REG_PHYData3Ctl 0x005E
#define MIPI_REG_PHYTimDly 0x0060
#define MIPI_REG_PHYSta 0x0062
#define MIPI_REG_CSIStatus 0x0064
#define MIPI_REG_CSIErrEn 0x0066
#define MIPI_REG_MDLSynErr 0x0068
#define MIPI_REG_FrmErrCnt 0x0080
#define MIPI_REG_MDLErrCnt 0x0090

void mipi_clear_error(void) {
    MipiBridgeRegWrite(MIPI_REG_CSIStatus, 0x01FF); // Clear error
    MipiBridgeRegWrite(MIPI_REG_MDLSynErr, 0x0000); // Clear error
    MipiBridgeRegWrite(MIPI_REG_FrmErrCnt, 0x0000); // Clear error
    MipiBridgeRegWrite(MIPI_REG_MDLErrCnt, 0x0000); // Clear error

    MipiBridgeRegWrite(0x0082, 0x00);
    MipiBridgeRegWrite(0x0084, 0x00);
    MipiBridgeRegWrite(0x0086, 0x00);
    MipiBridgeRegWrite(0x0088, 0x00);
    MipiBridgeRegWrite(0x008A, 0x00);
    MipiBridgeRegWrite(0x008C, 0x00);
    MipiBridgeRegWrite(0x008E, 0x00);
    MipiBridgeRegWrite(0x0090, 0x00);
}

void mipi_show_error_info(void) {
    alt_u16 PHY_status, SCI_status, MDLSynErr, FrmErrCnt, MDLErrCnt;

    PHY_status = MipiBridgeRegRead(MIPI_REG_PHYSta);
    SCI_status = MipiBridgeRegRead(MIPI_REG_CSIStatus);
    MDLSynErr = MipiBridgeRegRead(MIPI_REG_MDLSynErr);
    FrmErrCnt = MipiBridgeRegRead(MIPI_REG_FrmErrCnt);
    MDLErrCnt = MipiBridgeRegRead(MIPI_REG_MDLErrCnt);
    printf("PHY_status=%xh, CSI_status=%xh, MDLSynErr=%xh, FrmErrCnt=%xh, MDLErrCnt=%xh\n",
           PHY_status, SCI_status, MDLSynErr, FrmErrCnt, MDLErrCnt);

    PHY_status = MipiBridgeRegRead(MIPI_REG_PHYClkCtl);
    printf("Phy Clock Control=%xh\n", PHY_status);

    PHY_status = MipiBridgeRegRead(MIPI_REG_PHYData0Ctl);
    printf("Phy Data 0 Control=%xh\n", PHY_status);

    PHY_status = MipiBridgeRegRead(MIPI_REG_PHYData1Ctl);
    printf("Phy Data 1 Control=%xh\n", PHY_status);

    PHY_status = MipiBridgeRegRead(MIPI_REG_PHYData2Ctl);
    printf("Phy Data 2 Control=%xh\n", PHY_status);

    PHY_status = MipiBridgeRegRead(MIPI_REG_PHYData3Ctl);
    printf("Phy Data 3 Control=%xh\n", PHY_status);

    PHY_status = MipiBridgeRegRead(MIPI_REG_PHYTimDly);
    printf("Phy Timing Delay=%xh\n", PHY_status);
}

int main() {
    FILE *fp;
    alt_u16 enable, status, msg, id, bbcol;
    int len, i;
    alt_u32 buffer;

    IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0);
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, 0);

    printf("Hello from Nios II!\n");

    I2C_Init();

    // Init Camera
    if (camera_init() != 0) {
        printf("Camera init fail\n");
        return 0;
    }

    if (compress_init() != 0) {
        printf("Compress init fail\n");
        return 0;
    }

    enable = 1;
    printf("Init auto focus...\n");
    auto_focus_init();
    printf("Auto focus init done\n");
    printf("Auto focus Enable\n");

    mipi_clear_error();

    while (1) {
        if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE)) {
            // get image size
            I2C_Read16(VS6624_DEVICE, SENSOR_REG_SYS_STATUS, &status);
            len = ((status >> 8) & 0xFF) * 1024;
            printf("Image Size = %d KB\n", len);

            // Allocate memory for image buffer
            I2C_AllocBuffer(&buffer, len);
            if (buffer == 0) {
                printf("Out of memory\n");
                continue;
            }

            // Read image data from camera
            printf("Start capture image\n");
            I2C_ReadBurst(VS6624_DEVICE, SENSOR_REG_IMG_OUT, (alt_u8 *) buffer, len);

            // Write image data to file
            printf("Saving image to file...\n");
            fp = fopen("image.bin", "wb");
            if (fp == NULL) {
                printf("Error opening file\n");
            } else {
                fwrite(&buffer, sizeof(buffer), 1, fp);
                fclose(fp);
                printf("Image saved successfully\n");
            }

            // Process image
            printf("Processing image...\n");
            // TODO: Add your image processing code here

            // Send message to EEE_IMGPROC
            printf("Sending message to EEE_IMGPROC...\n");
            I2C_Write16(EEE_IMGPROC_DEVICE, EEE_IMGPROC_MSG_START, 0x01);

            // Wait for response from EEE_IMGPROC
            printf("Waiting for response from EEE_IMGPROC...\n");
            while (1) {
                I2C_Read16(EEE_IMGPROC_DEVICE, EEE_IMGPROC_STATUS, &status);
                if (status == 0x01) {
                    printf("EEE_IMGPROC processing done\n");
                    break;
                } else if (status == 0x02) {
                    printf("EEE_IMGPROC processing failed\n");
                    break;
                }
            }

            // Read message from EEE_IMGPROC
            I2C_Read16(EEE_IMGPROC_DEVICE, EEE_IMGPROC_MSG, &msg);
            I2C_Read16(EEE_IMGPROC_DEVICE, EEE_IMGPROC_ID, &id);
            I2C_Read16(EEE_IMGPROC_DEVICE, EEE_IMGPROC_BBCOL, &bbcol);
            printf("Message = %xh, ID = %xh, BBcol = %xh\n", msg, id, bbcol);

            // Free image buffer
            I2C_FreeBuffer(buffer);

            // Disable auto focus
            auto_focus_disable();
            printf("Auto focus Disable\n");

            // Show MIPI error info
            mipi_show_error_info();

            break;
        }
    }

    return 0;
}
